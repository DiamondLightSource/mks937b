#! Generated by VisualDCT v2.5
#! DBDSTART
#! DBDEND


# mks937bImg.template
#% macro, __doc__, Template database for an inverted magnetron guage connected 
# to one channel of an mks937b Multi-Sensor System 
# A note on the optional macros: they default to an appropriate hard-coded 
# value if no value is passed for expansion. 
# They are provided to allow the default set points to be changed. 
# Once the set point needs to be changed it may be necessary to alter  
# various other fields defining the range of allowed values. 
# For the majority of applications the defaults should be used.  The levels 
# should only be changed at the request of the vacuum group for non-standard 
# vacuum systems.
#
# required substitutions:
#% macro, device,  device name
#% macro, port,    serial port (steam device code ie /ty/0/1 => ty_0_1)
#% macro, address, Controller address (001 .. 253)
#% macro, channel, MKS 937B channel number (1-4)
#
# optional substitutions:
#% macro, name,        Object name, and gui association name
#% macro, ctl_channel, The desired control channel 0 = C1, 1 = C2, 2 = None, 3 = A1, 4 = B1, 5 = A2, 6 = B2.
#% macro, ctlsp_level, The desired control setpoint value.
#% macro, ctlsp_drvh,  The DRVH field on control setpoint records 
#                      (limits max value of control setpoint)
#% macro, ctlsp_drvl,  The DRVL field on control setpoint records. 
#                      (limits min value of control setpoint)
#% macro, ctlsp_hopr,  The HOPR field on control setpoint records 
#                      (high operator value - helps display set correct range).
#% macro, ctlsp_lopr,  The LOPR field on control setpoint records 
#                      (low operator value - helps display set correct range).
#% macro, ctlsp_hihi,  The HIHI alarm field on the control setpoint record.
#% macro, ctlsp_lolo,  The LOLO alarm field on the control setpoint record.
#% macro, ctlsp_high,  The HIGH alarm field on the control setpoint record.
#% macro, ctlsp_low ,  The LOW alarm field on the control setpoint record.
#% macro, ctlsp_desc,  The DESC field on the control setpoint record.
#% macro, ctlhyst_hopr,The HOPR field on control hysteresis records 
#                      (high operator value - helps display set correct range).
#% macro, ctlhyst_lopr,The LOPR field on control hysteresis records 
#                      (low operator value - helps display set correct range).
#% macro, prosp_level, The desired protection setpoint value.
#% macro, prosp_drvh,  The DRVH field on protection setpoint records 
#                      (limits max value of protection setpoint)
#% macro, prosp_drvl,  The DRVL field on protection setpoint records. 
#                      (limits min value of protection setpoint)
#% macro, prosp_hopr,  The HOPR field on protection setpoint records 
#                      (high operator value - helps display set correct range).
#% macro, prosp_lopr,  The LOPR field on protection setpoint records 
#                      (low operator value - helps display set correct range).
#% macro, prosp_hihi,  The HIHI alarm field on the protection setpoint record.
#% macro, prosp_lolo,  The LOLO alarm field on the protection setpoint record.
#% macro, prosp_high,  The HIGH alarm field on the protection setpoint record.
#% macro, prosp_low ,  The LOW alarm field on the protection setpoint record.
#% macro, prosp_desc,  The DESC field on the protection setpoint record 
#                      (appears as a label on the Img EDM screen).
#
#% macro, offwarn,     Flag to display a warning that switching off the IMG could trip the beam
#% macro, ilk_write_access_pv ,   Link to the interlocks setpoint global write access record.
#
################################################################################

# This associates an edm screen with the template
# % gui, $(name=), edm, mks937bImg.edl, device=$(device)

# This associates BOY screens with the template
# % gui, $(name=), boydetail, mks937bApp_opi/img_detail.opi, device=$(device), desc=$(device), name=$(name=)
# % gui, $(name=), boyembed, mks937bApp_opi/img_embed_box.opi, device=$(device), desc=$(device), name=$(name=)
# % gui, $(name=), boyembed, mks937bApp_opi/img_embed.opi, device=$(device), desc=$(device), name=$(name=)

# These define what PVs a valve detail screen should contain
# % gui, $(name=), readback, Pressure,                                $(device):P
# % gui, $(name=), readback, Status,                                  $(device):STA
# % gui, $(name=), readback, Relay 1 on SetPoint for Summary,         $(device):RLY1:SP,        =pv("$(device):RLY1:SP.DESC")
# % gui, $(name=), readback, Relay 1 off SetPoint for Summary,        $(device):RLY1:SPOFF,     =pv("$(device):RLY1:SPOFF.DESC")
# % gui, $(name=), readback, Relay 2 on SetPoint for Summary,         $(device):RLY2:SP,        =pv("$(device):RLY2:SP.DESC")
# % gui, $(name=), readback, Relay 3 on SetPoint for Summary,         $(device):RLY3:SP,        =pv("$(device):RLY3:SP.DESC")
## TODO The below gives us feedback on what the state actually is - without this you get the current demand
## (as per differences between EDM and CSS enum menus)
# % gui, $(name=), readback, Cold Cathode,                            $(device):ISENABLED
# % gui, $(name=), enum, Cold Cathode,                                $(device):CCHV

# % gui, $(name=), readback, CTL SP Controlling Gauge,                $(device):CTL:SETCCS,     =concat(pv("$(device):CTL:SP.DESC")," Gauge")
# % gui, $(name=), readback, CTL SP MODE,                             $(device):CTL:SETMODE,    =concat(pv("$(device):CTL:SP.DESC")," Mode")
# % gui, $(name=), readback, Pro Setpoint,                            $(device):PRO:SP,         =pv("$(device):PRO:SP.DESC")
# % gui, $(name=), readback, Relay 1 On Setpoint,                     $(device):RLY1:SP,        =pv("$(device):RLY1:SP.DESC")
# % gui, $(name=), readback, Relay 1 Off Setpoint,                    $(device):RLY1:SPOFF,     =pv("$(device):RLY1:SPOFF.DESC")
# % gui, $(name=), readback, Relay 2 On Setpoint,                     $(device):RLY2:SP,        =pv("$(device):RLY2:SP.DESC")
# % gui, $(name=), readback, Relay 2 Off Setpoint,                    $(device):RLY2:SPOFF,     =pv("$(device):RLY2:SPOFF.DESC")
# % gui, $(name=), readback, Relay 3 On Setpoint,                     $(device):RLY3:SP,        =pv("$(device):RLY3:SP.DESC")
# % gui, $(name=), readback, Relay 3 Off Setpoint,                    $(device):RLY3:SPOFF,     =pv("$(device):RLY3:SPOFF.DESC")
# % gui, $(name=), readback, Relay 4 On Setpoint,                     $(device):RLY4:SP,        =pv("$(device):RLY4:SP.DESC")
# % gui, $(name=), readback, Relay 4 Off Setpoint,                    $(device):RLY4:SPOFF,     =pv("$(device):RLY4:SPOFF.DESC")
# % gui, $(name=), readback, Fast Relay On Setpoint,                  $(device):FRLY:SP,        =pv("$(device):FRLY:SP.DESC")

# % gui, $(name=), demand,   Pro Setpoint,                            $(device):PRO:OUTSP,      =pv("$(device):PRO:SP.DESC")
# % gui, $(name=), demand,   Relay 1 On Setpoint,                     $(device):RLY1:SETSP,     =pv("$(device):RLY1:SP.DESC")
# % gui, $(name=), demand,   Relay 1 Off Setpoint,                    $(device):RLY1:SETSPOFF,  =pv("$(device):RLY1:SPOFF.DESC")
# % gui, $(name=), demand,   Relay 2 On Setpoint,                     $(device):RLY2:SETSP,     =pv("$(device):RLY2:SP.DESC")
# % gui, $(name=), demand,   Relay 2 Off Setpoint,                    $(device):RLY2:SETSPOFF,  =pv("$(device):RLY2:SPOFF.DESC")
# % gui, $(name=), demand,   Relay 3 On Setpoint,                     $(device):RLY3:SETSP,     =pv("$(device):RLY3:SP.DESC")
# % gui, $(name=), demand,   Relay 3 Off Setpoint,                    $(device):RLY3:SETSPOFF,  =pv("$(device):RLY3:SPOFF.DESC")
# % gui, $(name=), demand,   Relay 4 On Setpoint,                     $(device):RLY4:SETSP,     =pv("$(device):RLY4:SP.DESC")
# % gui, $(name=), demand,   Relay 4 Off Setpoint,                    $(device):RLY4:SETSPOFF,  =pv("$(device):RLY4:SPOFF.DESC")
# % gui, $(name=), demand,   Fast Relay On Setpoint,                  $(device):FRLY:SETSP,     =pv("$(device):FRLY:SP.DESC")

# % gui, $(name=), readback, Relay 1 SP Mode,                         $(device):RLY1:MODE,      =concat(pv("$(device):RLY1:SP.DESC")," Mode")
# % gui, $(name=), readback, Relay 2 SP Mode,                         $(device):RLY2:MODE,      =concat(pv("$(device):RLY2:SP.DESC")," Mode")
# % gui, $(name=), readback, Relay 3 SP Mode,                         $(device):RLY3:MODE,      =concat(pv("$(device):RLY3:SP.DESC")," Mode")
# % gui, $(name=), readback, Relay 4 SP Mode,                         $(device):RLY4:MODE,      =concat(pv("$(device):RLY4:SP.DESC")," Mode")

# % gui, $(name=), enum, CTL SP Controlling Gauge,                    $(device):CTL:SETCCS,     =concat(pv("$(device):CTL:SP.DESC")," Gauge")
# % gui, $(name=), enum, CTL SP MODE,                                 $(device):CTL:SETMODE,    =concat(pv("$(device):CTL:SP.DESC")," Mode")
# % gui, $(name=), enum, Relay 1 SP Mode,                             $(device):RLY1:SETMODE,   =concat(pv("$(device):RLY1:SP.DESC")," Mode")
# % gui, $(name=), readback, Relay 1 SP Direction,                    $(device):RLY1:DIR,       =concat(pv("$(device):RLY1:SP.DESC")," Dir")
# % gui, $(name=), enum, Relay 2 SP Mode,                             $(device):RLY2:SETMODE,   =concat(pv("$(device):RLY2:SP.DESC")," Mode")
# % gui, $(name=), readback, Relay 2 SP Direction,                    $(device):RLY2:DIR,       =concat(pv("$(device):RLY2:SP.DESC")," Dir")
# % gui, $(name=), enum, Relay 3 SP Mode,                             $(device):RLY3:SETMODE,   =concat(pv("$(device):RLY3:SP.DESC")," Mode")
# % gui, $(name=), readback, Relay 3 SP Direction,                    $(device):RLY3:DIR,       =concat(pv("$(device):RLY3:SP.DESC")," Dir")
# % gui, $(name=), enum, Relay 4 SP Mode,                             $(device):RLY4:SETMODE,   =concat(pv("$(device):RLY4:SP.DESC")," Mode")
# % gui, $(name=), readback, Relay 4 SP Direction,                    $(device):RLY4:DIR,       =concat(pv("$(device):RLY4:SP.DESC")," Dir")

#
#% archiver 10 Monitor
#% controldesk Pressure scon
#
record(bo, "$(device):CCHV") 
{
  field(DESC, "Cold Cathode Enable")
  field(DTYP, "stream")
  field(OUT, "@mks937b.protocol ccenable($(address),$(channel)) $(port) 0")
  field(FLNK, "$(device):FANENAB")
  field(ZNAM, "Off")
  field(ONAM, "On")
}

record(mbbi, "$(device):ISENABLED") {
  field(DESC, "IMG power")
  field(DTYP, "stream")
  field(INP,  "@mks937b.protocol get_cc_enabled($(address),$(channel)) $(port)")
  field(ZRST, "Off")
  field(ONST, "On")
  field(ZRSV, "MAJOR")
  field(ONSV, "NO_ALARM")
  field(PINI, "YES")
}

#  Changing CC HV mode requires associated processing of :STA and :ISENABLED
#  to update the readbacks
record(fanout, "$(device):FANENAB")
{
    field(DESC, "Distribute enabled")
    field(SCAN, "10 second")
    field(LNK1, "$(device):STA")
    field(LNK2, "$(device):ISENABLED")
}


record(bi, "$(device):SWITCHING") 
{
  field(DESC, "Switching")
  field(PINI, "YES")
  field(INP, "0")
  field(ONAM, "Switching")
}

################################################################################
# Status
#
#% archiver 10 Monitor
#% controldesk Pressure smon
#
record(mbbi, "$(device):STA") 
{
  field(DTYP, "Soft Channel")
#  field(DTYP, "stream")
#  field(INP, "@mks937b.protocol status($(address),$(channel)) $(port)")
#  field(SCAN, "I/O Intr")
  field(DESC, "Status")
#  field(FLNK, "$(device):PDIS")
  field(ZRST, "OK")
  field(ONST, "OK")
  field(TWST, "Above Range")
  field(THST, "At Atmosphere")
  field(FRST, "Low Emission")
  field(FVST, "Filament Off")
  field(SXST, "HV Off")
  field(SVST, "Startup Delay")
  field(EIST, "Below Range")
  field(NIST, "Controlled")
  field(TEST, "Protected State")
  field(ELST, "No Gauge")
  field(TVST, "Not Connected")
  field(TTST, "Wrong Gauge")
  field(FTST, "Bad Command")
  field(FFST, "Locked Out")
  field(UNSV, "MAJOR")
  field(ZRSV, "NO_ALARM")
  field(ONSV, "NO_ALARM")
  field(TWSV, "MINOR")
  field(THSV, "MINOR")
  field(FRSV, "MAJOR")
  field(FVSV, "MAJOR")
  field(SXSV, "MAJOR")
  field(SVSV, "MINOR")
  field(EISV, "NO_ALARM")
  field(NISV, "MINOR")
  field(TESV, "MINOR")
  field(ELSV, "MAJOR")
  field(TVSV, "MAJOR")
  field(TTSV, "MAJOR")
  field(FTSV, "MAJOR")
  field(FFSV, "MAJOR")
}

#############################################################################
# Pressure
#   This record is disabled when :PDIS is 1, i.e. when the status returned is 
#   not a pressure reading.
# % archiver 1 Monitor
# % controldesk Pressure readback
record(ai, "$(device):P") 
{
  field(DESC, "Pressure")
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(INP, "@mks937b.protocol pressure($(address),$(channel),$(device)) $(port)")
  field(FLNK, "$(device):PLOG")
  field(EGU, "mbar")
  field(PREC, "11")
  field(HOPR, "0.01")
  field(LOPR, "1.0E-11")
#  field(SDIS, "$(device):PDIS")
  field(DISS, "INVALID")
}

#
# Determine if P is a valid pressure
# if so we can set STA to OK
#
record(calc, "$(device):GOODP") 
{
  field(DESC, "Valid pressure calc")
  field(INPA, "$(device):P.SEVR")
  field(CALC, "(A>0)?0:1")
}
record(seq, "$(device):PSEQ") 
{
  field(DESC, "Seq Pressure & Status")
  field(SELM, "Specified")
  field(SELL, "$(device):GOODP PP")
  field(DOL1, "1")
  field(LNK1, "$(device):STA PP")
}

record(calcout, "$(device):ADEL") 
{
  field(DESC, "deadband")
  field(CALC, "A/B")
  field(OUT, "$(device):P.ADEL")
  field(INPA, "$(device):P")
  field(INPB, "20")
  field(SCAN, "10 second")
}

#
#% archiver 1 Monitor
#
record(calc, "$(device):PLOG") 
{
  field(DESC, "log Pressure")
  field(EGU, "log")
  field(CALC, "LOG(A)")
  field(INPA, "$(device):P MS")
  field(FLNK, "$(device):PMAX")
  field(HOPR, "-2")
  field(LOPR, "-11")
  field(ADEL, "0.025")
}
record(ai, "$(device):PMAX")
{
    field(DESC, "Max Pressure")
    field(INP,  "$(device):P MS")
    field(FLNK, "$(device):PMIN")
    field(EGU,  "mbar")
    field(PREC, "11")
    field(HOPR, "0.01")
    field(LOPR, "1.0E-11")
}
record(ai, "$(device):PMIN")
{
    field(DESC, "Min Pressure")
    field(INP,  "$(device):P MS")
    field(EGU,  "mbar")
    field(PREC, "11")
    field(HOPR, "0.01")
    field(LOPR, "1.0E-11")
    field(FLNK, "$(device):PSEQ")
}
################################################################################
# Control - IMG Enable
#

# Force processing of slow PP records 
record(fanout, "$(device):CTL:FAN10S")
{
    field(DESC, "CTL 10s Scan fanout")
    field(SCAN, "10 second")
    field(LNK1, "$(device):CTL:MODE PP")
    field(LNK2, "$(device):CTL:CCS PP")
    field(LNK3, "$(device):CTL:SP PP")
    field(LNK4, "$(device):PRO:SP PP")
    field(SELM, "All")
}

#record(ao, "$(device):CTL:SETSP") {
#  field(DESC, "$(ctlsp_desc=IMG Enable)")
#  field(DTYP, "stream")
#  field(OUT, "@mks937b.protocol setcc_sp($(address),$(channel)) $(port)")
#  field(FLNK, "$(device):CTL:HYST")
#  field(EGU, "mbar")
#  field(PREC, "1")
#  field(HOPR, "$(ctlsp_hopr=9.5e-1)")
#  field(LOPR, "$(ctlsp_lopr=2.7e-3)")
#  field(DRVH, "$(ctlsp_drvh=9.5e-1)")
#  field(DRVL, "$(ctlsp_drvl=2.7e-3)")
#  field(DOL, "$(ctlsp_level=1.0e-2)")
#}

record(ai, "$(device):CTL:SP") 
{
  field(DESC, "$(ctlsp_desc=IMG Enable)")
  field(DTYP, "stream")
  field(INP, "@mks937b.protocol getcc_sp($(address),$(channel)) $(port)")
  field(SCAN, "Passive")
  field(EGU, "mbar")
  field(PREC, "1")
  field(HOPR, "$(ctlsp_hopr=9.5e-1)")
  field(LOPR, "$(ctlsp_lopr=2.7e-3)")
  field(HIHI, "$(ctlsp_hihi=9.6e-1)")
  field(LOLO, "$(ctlsp_lolo=2.6e-3)")
  field(HIGH, "$(ctlsp_high=1.1e-2)")
  field(LOW, "$(ctlsp_low=9.0e-3)")
  field(HHSV, "MAJOR")
  field(LLSV, "MAJOR")
  field(HSV, "MINOR")
  field(LSV, "MINOR")
}

# This record sets the setpoint locally
# but doesnt write it to the controller
# as we now need to send a pre-command
# to extend the setpoint range (XCS<n> command)
record(ao, "$(device):CTL:OUTSP") 
{
  field(DESC, "$(ctlsp_desc=IMG Enable)")
#  field(DTYP, "stream")
#  Device Output now via CTL:SETSP after CTL:SETSPPRESEQ
#  field(OUT, "@mks937b.protocol setcc_sp($(address),$(channel)) $(port)")
  field(EGU, "mbar")
  field(PREC, "1")
  field(HOPR, "$(ctlsp_hopr=9.5e-1)")
  field(LOPR, "$(ctlsp_lopr=2.7e-3)")
  field(DRVH, "$(ctlsp_drvh=9.5e-1)")
  field(DRVL, "$(ctlsp_drvl=2.7e-3)")
  field(DOL, "$(ctlsp_level=1.0e-2)")
#  field(FLNK, "$(device):CTL:SETSPFAN")
# Insert pre-sequence to set extended setpoint
  field(FLNK, "$(device):CTL:SETSPPRESEQ")
}

record(ao, "$(device):CTL:SETSP") 
    {
    field(DESC, "$(ctlsp_desc=IMG Enable)")
    field(DTYP, "stream")
    field(OUT, "@mks937b.protocol setcc_sp($(address),$(channel)) $(port)")
    field(EGU, "mbar")
    field(PREC, "1")
    field(HOPR, "$(ctlsp_hopr=9.5e-1)")
    field(LOPR, "$(ctlsp_lopr=2.7e-3)")
    field(DRVH, "$(ctlsp_drvh=9.5e-1)")
    field(DRVL, "$(ctlsp_drvl=2.7e-3)")
    field(DOL, "$(ctlsp_level=1.0e-2)")
    field(FLNK, "$(device):CTL:SETSPFAN")
    }

record(seq, "$(device):CTL:SETSPPRESEQ")
    {
    field(DESC, "Preconditions to IMG Setpoint")
    field(SELM, "All")
    field(DOL1, "1")
    field(LNK1, "$(device):CTL:SETEXTRANGE PP")
    field(DOL2, "$(device):CTL:OUTSP")
    field(LNK2, "$(device):CTL:SETSP PP")
    }

record(mbbo, "$(device):CTL:SETEXTRANGE")
    {
    field(DTYP, "stream")
    field(DESC, "CC Extended Setpoint Enable")
    field(OUT, "@mks937b.protocol setcc_extended_range($(address),$(channel)) $(port)")
    field(ZRST, "OFF")
    field(ONST, "ON")
    field(ONSV, "NO_ALARM")
    field(TWSV, "NO_ALARM")
    field(DOL, "1")
#    field(PINI, "YES")
    }

# On setting a new interlock control setpoint, we need to update the 
# default hysteresis value and readback of the new setpoint from the 
# gauge controller.
#
record(fanout, "$(device):CTL:SETSPFAN")
{
    field(DESC, "CTL Set SP fanout")
    field(LNK1, "$(device):CTL:HYST PP")
    field(LNK2, "$(device):CTL:SP PP")
}

record(ao, "$(device):CTL:SETHYST") 
{
  field(DESC, "CC Hysteresis")
  field(DTYP, "stream")
  field(OUT, "@mks937b.protocol setcc_hyst($(address),$(channel)) $(port)")
  field(EGU, "mbar")
  field(PREC, "1")
  field(HOPR, "$(ctlhyst_hopr=1.2e-2)")
  field(LOPR, "$(ctlhyst_lopr=2.7e-10)")
  field(DRVH, "$(ctlhyst_hopr=1.2e-2)")
  field(DRVL, "$(ctlhyst_lopr=2.7e-10)")
  field(FLNK, "$(device):CTL:HYST PP")
}

record(calc, "$(device):CTL:MINHYST") 
{
  field(DESC, "Minimum hysteresis")
  field(EGU, "mbar")
  field(CALC, "A*1.2")
  field(INPA, "$(device):CTL:SP MS")
  field(FLNK, "$(device):CTL:SETHYST")
  field(HOPR, "-2")
  field(LOPR, "-11")
  field(ADEL, "0.025")
}

record(ai, "$(device):CTL:HYST") 
{
  field(DESC, "Setpoint Hysteresis")
  field(DTYP, "stream")
  field(INP, "@mks937b.protocol getcc_hyst($(address),$(channel)) $(port)")
  field(SCAN, "Passive")
  field(EGU, "mbar")
  field(PREC, "1")
  field(HOPR, "$(ctlhyst_hopr=1.2e-2)")
  field(LOPR, "$(ctlhyst_lopr=2.7e-10)")
  field(PINI, "YES")
#  field(FLNK, "$(device):CTL:HYSTSEQ")
}

# When the controller hysteresis changes internally
# set the value in the SETHYST text entry box accordingly
record(seq, "$(device):CTL:HYSTSEQ") 
{
  field(DESC, "Hysteresis Sequence")
  field(SELM, "All")
  field(DOL1, "$(device):CTL:HYST")
  field(LNK1, "$(device):SETHYST.VAL PP")
}


record(bo, "$(device):CTL:DIS") 
{
  field(DESC, "Disable Control Setpoint")
  field(DTYP, "stream")
  field(OUT, "@mks937b.protocol discc_sp($(address),$(channel)) $(port)")
}

record(mbbo, "$(device):CTL:SETMODE") 
{
  field(DTYP, "stream")
  field(DESC, "CC Operating Mode")
  field(OUT, "@mks937b.protocol setcc_ctl($(address),$(channel)) $(port)")
  field(ZRST, "Force On")
  field(ONST, "I/L Safe")
  field(TWST, "I/L Operating")
  field(ZRSV, "MINOR")
  field(ONSV, "NO_ALARM")
  field(TWSV, "NO_ALARM")
  field(DOL, "1")
  field(PINI, "YES")
  field(FLNK, "$(device):CTL:MODE")
}


record(mbbi, "$(device):CTL:MODE") 
{
  field(DTYP, "stream")
  field(INP, "@mks937b.protocol getcc_ctl($(address),$(channel)) $(port)")
  field(DESC, "CC Status")
  field(SCAN, "Passive")
  field(ZRST, "Force On")
  field(ONST, "I/L Safe")
  field(TWST, "I/L Operating")
  field(UNSV, "MAJOR")
  field(ZRSV, "MINOR")
  field(ONSV, "NO_ALARM")
  field(TWSV, "NO_ALARM")
}


record(mbbo, "$(device):CTL:SETCCS") 
{
  field(DTYP, "stream")
  field(DESC, "Control Channel Status")
  field(OUT, "@mks937b.protocol setcc_ctrl_chan($(address),$(channel)) $(port)")
  field(ZRST, "C1")
  field(ONST, "C2")
  field(TWST, "NONE")
  field(THST, "A1")
  field(FRST, "B1")
  field(FVST, "A2")
  field(SXST, "B2")
  field(ZRSV, "MINOR")
  field(ZRSV, "NO_ALARM")
  field(ONSV, "NO_ALARM")
  field(TWSV, "NO_ALARM")
  field(THSV, "NO_ALARM")
  field(FRSV, "NO_ALARM")
  field(FVSV, "NO_ALARM")
  field(SXSV, "NO_ALARM")
  field(DOL, "$(ctl_channel=0)")
  field(PINI, "YES")
  field(FLNK, "$(device):CTL:CCS")
}


record(mbbi, "$(device):CTL:CCS") 
{
  field(DTYP, "stream")
  field(INP, "@mks937b.protocol getcc_ctrl_chan($(address),$(channel)) $(port)")
  field(DESC, "Control Channel Status")
  field(SCAN, "Passive")
  field(ZRST, "C1")
  field(ONST, "C2")
  field(TWST, "NONE")
  field(THST, "A1")
  field(FRST, "B1")
  field(FVST, "A2")
  field(SXST, "B2")
  field(UNSV, "MAJOR")
  field(ZRSV, "NO_ALARM")
  field(ONSV, "NO_ALARM")
  field(TWSV, "NO_ALARM")
  field(THSV, "NO_ALARM")
  field(FRSV, "NO_ALARM")
  field(FVSV, "NO_ALARM")
  field(SXSV, "NO_ALARM")
}


################################################################################
# Protection - IMG Overpressure
#
#% archiver 10 Monitor
#
#record(ao, "$(device):PRO:SETSP") 
#{
#  field(DESC, "$(prosp_desc=IMG Overpressure)")
#  field(FLNK, "$(device):PRO:SEQ")
#  field(EGU, "mbar")
#  field(PREC, "1")
#  field(HOPR, "$(prosp_hopr=1.0e-2)")
#  field(LOPR, "$(prosp_lopr=1.3e-5)")
#  field(DRVH, "$(prosp_drvh=1.0e-2)")
#  field(DRVL, "$(prosp_drvl=1.3e-5)")
#  field(DOL, "$(prosp_level=5.0e-4)")
#}

#
#% archiver 10 Monitor
#
#record(mbbo, "$(device):PRO:ENABLE") 
#{
#  field(DESC, "Enable Protection Setpoint")
#  field(FLNK, "$(device):PRO:SEQ")
#  field(ZRST, "Force On I/L")
#  field(ONST, "I/L Operating")
#  field(ZRVL, "1")
#  field(ONVL, "2")
#  field(ZRSV, "MAJOR")
#  field(ONSV, "NO_ALARM")
#  field(DOL, "1")
#  field(PINI, "YES")    field(LNK2, "$(device):CTL:CCS")

#}

#record(seq, "$(device):PRO:SEQ") 
#{
#  field(DESC, "Sequence Protection Setpoint")
#  field(SELM, "Specified")
#  field(SELL, "$(device):PRO:ENABLE.RVAL")
#  field(DOL1, "0")
#  field(LNK1, "$(device):PRO:DIS PP")
#  field(DOL2, "$(device):PRO:SETSP")
#  field(LNK2, "$(device):PRO:OUTSP PP")
#}

#
#% archiver 10 Monitor
#% controldesk IMG Overpressure readback
#
record(ai, "$(device):PRO:SP") 
{
  field(DESC, "$(prosp_desc=IMG Overpressure)")
  field(DTYP, "stream")
  field(INP, "@mks937b.protocol getpro($(address),$(channel)) $(port) 0")
  field(SCAN, "Passive")
  field(EGU, "mbar")
  field(PREC, "1")
  field(HOPR, "$(prosp_hopr=1.0e-2)")
  field(LOPR, "$(prosp_lopr=1.3e-5)")
  field(HIHI, "$(prosp_hihi=1.1e-2)")
  field(LOLO, "$(prosp_lolo=1.2e-5)")
  field(HIGH, "$(prosp_high=5.1e-4)")
  field(LOW, "$(prosp_low=4.9e-4)")
  field(HHSV, "MAJOR")
  field(LLSV, "MAJOR")
  field(HSV, "MINOR")
  field(LSV, "MINOR")
}

# -----------------------------------------------------------------------------------------
# These two records work together to provide one scan
# to correctly initialise the SETSP record just once
# at startup.
#
record(bo, "$(device):PRO:INITSETSPSDIS") 
{
  field(DTYP, "Soft Channel")
  field(VAL, "1")
  field(OUT, "$(device):PRO:INITSETSPFAN.DISA")
}
record(fanout, "$(device):PRO:INITSETSPFAN")
{
    field(DESC, "Relay 1s Scan fanout")
    field(SCAN, "1 second")
    field(LNK1, "$(device):PRO:ILKSETSP:NOWRITE")
    field(LNK2, "$(device):PRO:OUTSP")
    field(LNK3, "$(device):PRO:INITSETSPSDIS")
    field(SELM, "All")
}

record(ao, "$(device):PRO:OUTSP") 
{
  field(DESC, "$(prosp_desc=IMG Overpressure)")
  field(DTYP, "stream")
  field(OUT, "@mks937b.protocol setpro($(address),$(channel)) $(port)")
  field(PREC, "1")
  field(HOPR, "$(prosp_hopr=1.0e-2)")
  field(LOPR, "$(prosp_lopr=1.3e-5)")
  field(DRVH, "$(prosp_drvh=1.0e-2)")
  field(DRVL, "$(prosp_drvl=1.3e-5)")
  #field(PINI, "YES")
  field(SDIS, "$(device):PRO:ILKSETSP:NOWRITE")
  field(DOL,  "$(prosp_level=5.0e-4)")
  field(FLNK, "$(device):PRO:SP PP")
}
# -----------------------------------------------------------------------------------------

record(bo, "$(device):PRO:DIS") 
{
  field(DESC, "Disable Protection Setpoint")
  field(DTYP, "stream")
  field(OUT, "@mks937b.protocol dispro($(address),$(channel)) $(port)")
}

record(calc, "$(device):PDIS") {
  field(PHAS, "1")
  field(CALC, "(A>1)?1:0")
  field(INPA, "$(device):STA")
  field(FLNK, "$(device):P")
}

record(ai, "$(device):ERRORNUM") 
{
  field(DESC, "Last error code")
  field(DTYP, "Soft Channel")
  field(INP, "0")
  field(SCAN, "Passive")
}


record(bi, "$(device):OFFWARN") 
{
  field(DESC, "Warning for OFF button")
  field(PINI, "YES")
  field(INP, "$(offwarn=0)")
  field(ZNAM, "Warning off")
  field(ONAM, "Warning on")
}


#
# The :CONSTZERO record allows the :ILKSETSP:NOWRITE record (below)
# to have a PV link rather than constant zero value, which would be 
# invalid with the "MS CP" modifiers
#
record(bi, "$(device):PRO:CONSTZERO")
  {
  field(DESC, "Constant zero value")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(INP, "0")
  field(ZNAM, "Zero")
  field(ONAM, "One")
  }

# Disable the writing of setpoints to hardware so the machine does not trip
# when the IOC is rebooted with lower default interlock pressures
# This record is local to the relay instance, but controlled by the global
# access record - given in the macro parameters. If not supplied, it will
# assume an empty INP and do nothing.
#
record(bi, "$(device):PRO:ILKSETSP:NOWRITE")
  {
  field(DESC, "ILK setpoint access")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(INP, "$(ilk_write_access_pv=$(device):PRO:CONSTZERO) MS CP")
  field(ZNAM, "Allow")
  field(ONAM, "Inhibit")
  }
  
  
